(start-repl)
(js/alert "Hello, ClojureScript")
:cljs/quit
(start-repl)
(js/console.log "Hello, ClojureScript")
(js/console.log "a")
(+ 5 6 7)
(js/console.log (+ 5 6 7))
(js/console.log "Hello, ClojureScript")
(js/console.log "Hello, asdfasdfasdfClojureScript")
(js/alert "Hello, ClojureScript")
js/window
js/document
(js/document.getElementById "loginForm")
(.getElementById js/document "loginForm")
(.-value (.getElementById js/dacument "email"))
(.-value (.getElementById js/document "email"))
(set! (.-value (.getElementById js/dacument "email")) "hola")
(set! (.-value (.getElementById js/document "email")) "hola")
(count (.-value (.getElementById js/document "email")))
(set! (.-value (.getElementById js/document "password")) "hola")
(require ´[modern-cljs.login :as l] :reload)
(require '[modern-cljs.login :as l] :reload)
l/validate-form
:cljs/quit
()quit
(quit)
(start-repl)
(quit)
(start-repl)
(require '[modern-cljs.login :as l] :reload)
l/validate-form
(source l/validate-form)
l/validate-form
(l/validate-form)
:cljs/quit
:boot/quit
(quit)
(start-repl)
(l/validate-form)
(source l/validate-form)
(require '[modern-cljs.login :as l] :reload)
(source l/validate-form)
l/validate-form
(source l/validate-form)
:cljs/quit
(quit)
(start-repl)
(require '[domina.core :refer [by-id value set-value!]])
(doc by-id)
(by-id "email")
(by-id 'email')
(set-value! (by-id "email") "")
(set-value! (by-id "email") "hola")
(set-value! (by-id "email") "asdfasdasdf")
(set-value! (by-id "email") "29834658237645923847629384763294876983245")
(js/alert "hola")
(set-value! (by-id "email") "kasjdfkasjdhfas")
(set-value! (by-id "email") "kasjddfdfff")
l/validate-form
(require '[modern-cljs.login :as l] :reload)
l/validate-form
(source l/validate-form)
l/validate-form
(source l/validate-form)
(value (by-id "quantity"))
(set-value! (by-id "quantity") "40")
(set-value! (by-id "quantity") "40aksdhgjasdf")
(set-value! (by-id "quantity") "4098987")
(set-value! (by-id "quantity") "40")
(set-value! (by-id "email") "asd")
(set-value! (by-id "quantity") "40")
(require '[modern-cljs.shopping :as s] :reload)
(l/init)
(.-onsubmit (by-id "loginForm"))
:cljs/quit
(quit)
(start-repl)
(js/alert "afe")
(require '[modern-cljs.shopping :as shop] :reload                     '[domina.core :as dom] :reload                     '[domina.events :as evt] :reload)
(apropos "capture")
(evt/listen! (dom/by-id "calc") :click shop/calculate)
(evt/unlisten! (dom/by-id "calc") :click)
(evt/capture! (dom/by-id "calc") :click shop/calculate)
:cljs/quit
(quit)
(start-repl)
(require '[modern-cljs.shopping :as shop] :reload                     '[domina.core :as dom] :reload                     '[domina.events :as evt] :reload)
(doc dom/append!)
(dom/append! (dom/by-id "shoppingForm")                         "<div class='help'>Click to calculate</div>")
(evt/listen! (dom/by-id "calc")                         :mouseover                         (fn []                           (dom/append!                            (dom/by-id "shoppingForm")                            "<div class='help'>Click to calculate</div>")))
(start-repl)
(js/alert "hola")
:cljs/quit
(quit)
(start-repl)
(.log js/console "hola")
(js/alert "hola")
(+ 1 2 3 4)
(.log js/console (+ 1 2 3 4))
(+ 1 2 3 4)
:cljs/quit
(quit)
(start-repl)
(js/alert "hola")
(repl-start)
epl-start)
(start-repl)
(require '[domina.core :as dom])
(dom/attr (dom/by-id "email") :pattern)
:cljs/quit
(quit)
(start-repl)
cljs/quit
:cljs/quit
(quit)
(start-repl)
:cljs/quit
(quit)
(start-repl)
(quit)
(start-repl)
(use 'valip.core 'valip.predicates)
f
(use 'valip.core)
(require 'valip.core 'valip.predicates)
(validate {:email "you@yourdomain.com" :password "weak1"}                      [:email present? "Email can't be empty"]                      [:email email-address? "Invalid email format"]                      [:password present? "Password can't be empty"]                      [:password (matches #"^(?=.*\d).{4,8}$") "Invalid password format"])
(use 'valip.core 'valip.predicates)
(quit)
(use 'valip.core 'valip.predicates)
(validate {:email "you@yourdomain.com" :password "weak1"}                      [:email present? "Email can't be empty"]                      [:email email-address? "Invalid email format"]                      [:password present? "Password can't be empty"]                      [:password (matches #"^(?=.*\d).{4,8}$") "Invalid password format"])
(validate {:email nil :password nil}                      [:email present? "Email can't be empty"]                      [:email email-address? "Invalid email format"]                      [:password present? "Password can't be empty"]                      [:password (matches #"^(?=.*\d).{4,8}$") "Invalid password format"])
(quit)
(start-repl)
(require '[valip.core :refer [validate]]                     '[valip.predicates :refer [present? matches email-address?]])
(present? nil)
(require '[modern-cljs.login.validators :refer [user-credential-errors]])
(user-credential-errors nil nil)
(user-credential-errors "a" nil)
(user-credential-errors "a@a.com" nil)
(user-credential-errors "a@a.com" 123)
(user-credential-errors "a@a.com" "123")
(user-credential-errors "a@a.com" "aaaa123")
(user-credential-errors "a@a.com" "aaa")
(user-credential-errors "a@a.om" "aaa")
(user-credential-errors "a@aom" "aaa")
:cljs/quit
(quit)
(start-repl)
:cljs/quit
(quit)
(use 'modern-cljs.shopping.validators)
(validate-shopping-form "1" "0" "0" "0")
(validate-shopping-form "-1" "0" "0" "0")
(validate-shopping-form "-1" "0" "0" "")
(validate-shopping-form "-1" "0" "0" 0)
(validate-shopping-form "-1" "0" "0" "0")
(validate-shopping-form "-1" "0" "0" 3)
(set-env! :source-paths #(conj % "test/cljc"))
(require '[clojure.test :as t]                     '[modern-cljs.shopping.validators-test])
(t/run-tests 'modern-cljs.shopping.validators-test)
(require '[modern-cljs.shopping.validators-test] :reload)
(t/run-tests 'modern-cljs.shopping.validators-test)
(require '[modern-cljs.shopping.validators-test] :reload)
(quit)
(set-env! :source-paths #(conj % "test/cljc"))
(require '[clojure.test :as t]                     '[modern-cljs.shopping.validators-test])
(t/run-tests 'modern-cljs.shopping.validators-test)
(require '[modern-cljs.shopping.validators-test] :reload)
(t/run-tests 'modern-cljs.shopping.validators-test)
(require '[modern-cljs.shopping.validators-test] :reload)
(t/run-tests 'modern-cljs.shopping.validators-test)
(start-repl)
(require '[cljs.test :as t :include-macros true])
(require '[modern-cljs.shopping.validators-test :as v])
(t/run-tests 'modern-cljs.shopping.validators-test)
:cljs/quit
(uit)
(quit)
(pprint (get-env :source-paths))
(require '[clojure.test :as t]                      '[modern-cljs.shopping.validators-test])
(t/run-tests 'modern-cljs.shopping.validators-test)
(start-repl)
(require '[cljs.test :as t :include-macros true]                      '[modern-cljs.shopping.validators-test :as v])
(t/run-tests 'modern-cljs.shopping.validators-test)
:cljs/quit
(quit)
(start-repl)
(require '[cljs.test :as t :include-macros true]                     '[modern-cljs.shopping.validators-test])
(t/run-tests 'modern-cljs.shopping.validators-test)
(require '[cljs.test :as t :include-macros true]                     '[modern-cljs.shopping.validators-test])
(t/run-tests 'modern-cljs.shopping.validators-test)
:cljs/quit
(quit)
(set-env! :dependencies #(conj % '[hiccup "1.0.5"]))
(require '[hiccup.core :refer [html]])
(html [:div                    [:label.help {:for "price"} "Price has to be a number"]                    [:input#price {:name "price" :min "1" :value "foo" :required "true"} ]] )
(require '[net.cgrand.enlive-html :as e] )
(html [:div [:label {:for "price"} "Price"]])
(e/sniptest (html [:div [:label {:for "price"} "Price"]]))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label] (e/content ""hola""))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label] (e/co'tent ""hola""))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label] (e/content "'hola'"))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label] (e/content 'hola'))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label (e/attr :for "asd")] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label (e/attr :for "price")] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label (e/attr= :for "price")] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label (e/attr= :for "asd")] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "Price"]]) [:label (e/attr= :for "price")] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "asd"]]) [:label (e/attr= :for "price")] (e/content "hola"))
(e/sniptest (html [:div [:label {:for "price"} "asd"]]) [[:label (e/attr= :for "price")]] (e/content "hola"))
(quit)
(start-repl)
 (require '[modern-cljs.shopping.validators :as v])
(doc cond)
(let [field :quantity                  val "1"]              (cond (= field :quantity) (v/validate-shopping-form val "0" "0" "0")                    (= field :price) (v/validate-shopping-form "1" val "0" "0")))
(let [field :quantity                  val "-1"]              (cond (= field :quantity) (v/validate-shopping-form val "0" "0" "0")                    (= field :price) (v/validate-shopping-form "1" val "0" "0")))
(doc condp)
(let [field :quantity                  val "1"]              (condp = field                :quantity (v/validate-shopping-form val "0" "0" "0")                :price (v/validate-shopping-form "1" val "0" "0")))
(let [field :quantity                  val "-1"]              (condp = field                :quantity (v/validate-shopping-form val "0" "0" "0")                :price (v/validate-shopping-form "-1" val "0" "0")))
(doc case)
(time (let [field :quantity                  val "-1"]              (condp = field                :quantity (v/validate-shopping-form val "0" "0" "0")                :price (v/validate-shopping-form "-1" val "0" "0"))))
(require '[domina.core :as dom]                     '[domina.css :as css])
(css/sel "label[for=quantity]")
(dom/text (css/sel "label[for=quantity]"))
(dom/set-text! (css/sel "label[for=quantity]") "hola")
(dom/text (css/sel "label[for=quantity]"))
(dom/add-class! (css/sel "label[for=quantity]") "help")
(dom/remove-class! (css/sel "label[for=quantity]") "help")
(doc dom)
(doc dom/remove-class!)
(name :hola)
(name 1)
(name 12)
(name :12)
:cljs/quit
(quit)
(start-repl)
(require '[reagent.core :as r :refer [render]])
(defn comment-box [] [:div "Hello, world! I'm a comment-box"])
(render [comment-box] (.getElementById js/document "content")) #object[Constructor [object Object]]
(render [comment-box] (.getElementById js/document "content"))
(render [comment-box] (.getElementById js/document "content")) #object[Constructor [object Object]]
(render [comment-box] (.getElementById js/document "content"))
(defn comment-box [] [:div "Hello, world! I'm a comment-box"])
(render [comment-box] (.getElementById js/document "content"))
(comment-box)
(r/render-to-string [comment-box] (.getElementById js/document "content"))
(r/render-to-string [comment-box])
(r/render-to-string comment-box)
(r/render-to-string 'comment-box)
(r/render-to-string (comment-box))
(defn comment-list []              [:div "Hello, world! I'm a comment-list"])
(defn comment-form []              [:div "Hello, world! I'm a comment-form"])
(defn comment-box []              [:div               [:h1 "Comments"]               [comment-list]               [comment-form]])
(render [comment-box] (by-id "content"))
(defn comment-list []              [:div "Hello, world! I'm a comment-list"])
(defn comment-box []              [:div               [:h1 "Comments"]               [comment-list]               [comment-form]])
(render [comment-box] (by-id "content"))
(defn comment-list []              [:div "Hello, world! I'm a comment-list"])
(defn comment-form []              [:div "Hello, world! I'm a comment-form"])
(defn comment-box []              [:div               [:h1 "Comments"]               [comment-list]               [comment-form]])
(render [comment-box] (by-id "content"))
 (require '[reagent.core :as r :refer [render]])
(render [comment-box] (by-id "content"))
(render [comment-box] (.getElementById js/document "content"))
(comment-box)
(defn comment-component [author text]              [:div               [:h2 author]               text])
(render [comment-box] (.getElementById js/document "content"))
(defn comment-component [author text]              [:div               [:h2 author]               text])
(defn comment-list []              [:div               [comment-component "Paul Hunt" "This is a comment"]               [comment-component "Jordan Walke" "This *another* component"]])
(render [comment-box] (.getElementById js/document "content"))
(require '[cljsjs.marked])
(js/marked "This is <em>another</em> comment." #js {:sanitize true})
def data [{:id 1                        :author "Pete Hunt"                        :text "This is one comment"}                       {:id 2                        :author "Jordan Walke"                        :text "This is *another* comment"}])
def data [{:id 1 :author "Pete Hunt" :text "This is one comment"}{:id 2 :author "Jordan Walke" :text "This is *another* comment"}])
(def data [{:id 1 :author "Pete Hunt" :text "This is one comment"}{:id 2 :author "Jordan Walke" :text "This is *another* comment"}])
(defn comment-list [comments]              [:div                (for [{:keys [id author text]} comments]                  ^{:key id} [comment-component author text])])
(render [comment-box] (.getElementById js/document "content"))
:cljs/quit
(quit)
(start-repl)
(require '[reagent.core :as r :refer [render]])
(require '[domina.core :refer [by-id]])
(require '[modern-cljs.reagent :refer [comment-box data]])
(render [comment-box data] (by-id "content"))
(require '[reagent.core :as r :refer [render]])
(require '[domina.core :refer [by-id]])
(require '[modern-cljs.reagent :refer [comment-box data]])
(render [comment-box data] (by-id "content"))
(deref clicks)
(require '[reagent.core :as r :refer [render]])
(require '[domina.core :refer [by-id]])
(require '[modern-cljs.reagent :refer [comment-box data]])
(deref clicks)
(def clicks (atom 0))
(deref clicks)
@clicks
(add-watch clicks :log #(-> %4 clj->js js/console.log))
@clicks
(reset! clicks 0)
(swap! clicks 2)
(swap! clicks + 2)
(def data (r/atom [{:id 1                     :author "Pete Hunt"                     :text "This is one comment"}                    {:id 2                     :author "Jordan Walke"                     :text "This is *another* comment"}]))
(defn comment-box [comments]   [:div    [:h1 "Comments"]    [comment-list comments]    [comment-form]])
(require '[reagent.core :as r :refer [render]])
(require '[domina.core :refer [by-id]])
(require '[modern-cljs.reagent :refer [comment-box data]])
(def data (r/atom [{:id 1                     :author "Pete Hunt"                     :text "This is one comment"}                    {:id 2                     :author "Jordan Walke"                     :text "This is *another* comment"}]))
(defn comment-box [comments]   [:div    [:h1 "Comments"]    [comment-list comments]    [comment-form]])
(defn comment-list [comments]   [:div    (for [{:keys [id author text]} @comments]      ^{:key id} [comment-component author text])])
(render [comment-box data] (by-id "content"))
(in-ns 'modern-cljs.reagent)
(defn comment-form []                        [:form                         [:input {:type "text"                                  :placeholder "Your name"}]                         [:input {:type "text"                                  :placeholder "Say something"}]                         [:input {:type "button"                                  :value "Post"}]])
(require '[domina.core :as dom :refer [by-id]])
(r/render [comment-box data] (by-id "content"))
(require '[reagent.core :as r :refer [render]])
(require '[modern-cljs.reagent :refer [comment-box data]])
(r/render [comment-box data] (by-id "content"))
(defn comment-form []                        (let [comment (r/atom {:author "" :text ""})]                          (fn []                            [:form                             [:input {:type "text"                                      :placeholder "Your name"                                      :value (:author @comment)}]                             [:input {:type "text"                                      :placeholder "Say something"                                      :value (:text @comment)}]                             [:input {:type "button"                                      :value "Post"}]])))
(r/render [comment-box data] (by-id "content"))
(quit)
(start-repl)
:cljs/quit
(quit)
